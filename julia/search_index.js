var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"For figure layout, the most useful functions will be updater to construct a common object, plot_figures to place figures in the document, relative_dimensions for sizing  plots correctly. ","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"The ids function can sometimes be useful for debugging purposes.","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [figure_second, figure_second.python_bindings]","category":"page"},{"location":"api/#figure_second.plot_figures-Tuple{Updater, Dict{String, Figure}}","page":"API Reference","title":"figure_second.plot_figures","text":"plot_figures(updater::Updater, figure_map::Dict{String, Makie.Figure})\n\nupdater is a wrapper around the python class. It represents the inkscape svg document we are plotting on.\n\nfigure_map is a dictionary with keys containing ids of inkscape objects  (rectangles or images) to plot on top of. The values of figure_map are  figures to render. \n\nThe user is responsible for filling each figure with content, and sizing it appropriately  to the dimensions of the inkscape object. See relative_dimensions for sizing considerations.\n\n\n\n\n\n","category":"method"},{"location":"api/#figure_second.plot_figures-Union{Tuple{T}, Tuple{Updater, Dict{String, Plots.Plot{T}}}} where T","page":"API Reference","title":"figure_second.plot_figures","text":"plot_figures(updater::Updater, figure_map::Dict{String, Plots.Plot})\n\nupdater is a wrapper around the python class. It represents the inkscape svg document we are plotting on.\n\nfigure_map is a dictionary with keys containing ids of inkscape objects  (rectangles or images) to plot on top of. The values of figure_map are  figures to render (outputs of Plots.jl plot() functions. \n\nThe user is responsible for filling each figure with content, and sizing it appropriately  to the dimensions of the inkscape object. See relative_dimensions for sizing considerations.\n\n\n\n\n\n","category":"method"},{"location":"api/#figure_second.python_bindings.Dimensions","page":"API Reference","title":"figure_second.python_bindings.Dimensions","text":"Dimensions(width::Float64, height::Float64)\n\nraw dimensions of an inkscape object. \n\n\n\n\n\n","category":"type"},{"location":"api/#figure_second.python_bindings.Updater","page":"API Reference","title":"figure_second.python_bindings.Updater","text":"Updater\n\nrepresentation of an inkscape document. An Updater can either mutate an the underlying inkscape file. or export to a new file See documentation on the constructor (updater)\n\n\n\n\n\n","category":"type"},{"location":"api/#figure_second.python_bindings.dimensions-Tuple{Updater, String}","page":"API Reference","title":"figure_second.python_bindings.dimensions","text":"dimensions(updater::Updater, id::String)::Dimensions\n\nparse the raw dimensions of an inkscape object with id id and return them  as a Dimensions object\n\n\n\n\n\n","category":"method"},{"location":"api/#figure_second.python_bindings.ids-Tuple{Updater}","page":"API Reference","title":"figure_second.python_bindings.ids","text":"ids(updater::Updater)::Vector{String}\n\nfetch all valid ids from the base_path document of an Updater\n\n\n\n\n\n","category":"method"},{"location":"api/#figure_second.python_bindings.relative_dimensions-Tuple{Updater, String, Float64}","page":"API Reference","title":"figure_second.python_bindings.relative_dimensions","text":"relative_dimensions(updater::Updater, id::String, height::Float64)::Tuple{Float64, Float64}\n\nCalculate the required dimension pair (width, height) to maintain the aspect ratio of  the inkscape object. Returns result in fractional units.\n\n\n\n\n\n","category":"method"},{"location":"api/#figure_second.python_bindings.relative_dimensions-Tuple{Updater, String, Int64}","page":"API Reference","title":"figure_second.python_bindings.relative_dimensions","text":"relative_dimensions(updater::Updater, id::String, height::Int)::Tuple{Int, Int}\n\nCalculate the required dimension pair (width, height) to maintain the aspect ratio of  the inkscape object. Rounds the otherwise float point value and converts to Int. \n\nThis is useful for plotting functions that expect an interger number for pixel dimensions\n\n\n\n\n\n","category":"method"},{"location":"api/#figure_second.python_bindings.update-Tuple{Updater, Dict{String, String}}","page":"API Reference","title":"figure_second.python_bindings.update","text":"update(updater::Updater, map::Dict{String, String})\n\nlow level function to update the contents of an inkscape file. The map argument maps an inkscape object's id to a file path containing a .png encoded image. The .png encoded image (dictionary value) will be placed in the inkscape object with the id of the key.\n\n\n\n\n\n","category":"method"},{"location":"api/#figure_second.python_bindings.updater-Tuple{String, String}","page":"API Reference","title":"figure_second.python_bindings.updater","text":"updater(base_path::String, output_file::String)::Updater\n\nUpdater constructor for a workflow that reads in a file base_path and  exports all changes under a new file output_file. \n\nThis Updater instance will not mutate the underlying base_path inkscape file\n\n\n\n\n\n","category":"method"},{"location":"api/#figure_second.python_bindings.updater-Tuple{String}","page":"API Reference","title":"figure_second.python_bindings.updater","text":"updater(base_path::String)::Updater\n\nUpdater constructor for a workflow that reads in a file base_path and  mutates it in place with all plotting changes.\n\n\n\n\n\n","category":"method"},{"location":"install/#Installing","page":"Installing","title":"Installing","text":"","category":"section"},{"location":"install/","page":"Installing","title":"Installing","text":"You can install the package from git (for now):","category":"page"},{"location":"install/","page":"Installing","title":"Installing","text":"using Pkg\nPkg.add(url=\"https://github.com/Fluid-Dynamics-Group/figure_second\", subdir=\"julia/figure_second\")","category":"page"},{"location":"install/","page":"Installing","title":"Installing","text":"Since the julia library currently wraps the python library, you must also have the python package:","category":"page"},{"location":"install/","page":"Installing","title":"Installing","text":"pip install figure-second","category":"page"},{"location":"install/","page":"Installing","title":"Installing","text":"and update the package as you would any other:","category":"page"},{"location":"install/","page":"Installing","title":"Installing","text":"using Pkg\nPkg.update(\"figure_second\")","category":"page"},{"location":"install/","page":"Installing","title":"Installing","text":"and also update the python package:","category":"page"},{"location":"install/","page":"Installing","title":"Installing","text":"pip install -U figure-second","category":"page"},{"location":"install/","page":"Installing","title":"Installing","text":"Note that the pip package builds from a high performance rust library. Therefore, you will need a recent rust compiler which can be installed here.","category":"page"},{"location":"#Welcome","page":"Welcome","title":"Welcome","text":"","category":"section"},{"location":"","page":"Welcome","title":"Welcome","text":"figure_second is a layout first approach to plotting based on the ideas of the python library figurefirst. The general workflow of the library is to define a layout of graphs in inkscape, label each object with an XML id, and then plot  into these objects using common julia plotting libraries (Makie.jl, Plots.jl, etc).","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"Depth = 3","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"The overall process of using figure_second is as follows:","category":"page"},{"location":"","page":"Welcome","title":"Welcome","text":"(Image: test)","category":"page"},{"location":"example/#Example","page":"Example","title":"Example","text":"","category":"section"},{"location":"example/#Defining-Layout-In-Inkscape","page":"Example","title":"Defining Layout In Inkscape","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"First, open inkscape and draw some rectangles with the rectangle tool (R):","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"(Image: )","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Right click on each rectangle and click Object Properties","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"(Image: )","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Then, change the label to something memorable and click Set - this  will be how you reference each shape from julia. The rectangles in this example are labeled A B C and D as such:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"(Image: )","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Now open julia and import figure_second and either a Makie library or Plots.jl:","category":"page"},{"location":"example/#Loading-the-Inkscape-document-in-Julia","page":"Example","title":"Loading the Inkscape document in Julia","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"using figure_second\nusing CairoMakie","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"then, create an Updater object that holds information on where the inkscape file is on disk. If  you are ok with mutating the inkscape file in place, you can do","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"inkscape = updater(\"./path/to/file.svg\")","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"then, we can find all the ids of the rectangles we just created with ids:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"ids(inkscape)\n# outputs: [\"A\" \"B\" \"C\" \"D\"]","category":"page"},{"location":"example/#Plotting-into-Inkscape","page":"Example","title":"Plotting into Inkscape","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"now, lets create general plotting function that we can reuse:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"function my_plot(x, y, inkscape::Updater, inkscape_id::String)\n\t# manually set a resolution\n\tres = (600, 400)\n\t\n\tfig = Figure(resolution = res, dpi = 200)\n\n\tax = Axis(fig[1,1], title = inkscape_id)\n\t\n\tlines!(ax, x, y, linewidth=4)\n\n\treturn fig\nend","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"and then place some data in the A rectangle for our figure:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"x = range(0, 2pi, 100)\nA = my_plot(x, sin.(x), inkscape, \"A\")\n\n# a dictionary of keys (name of inkscape ID) and values \n# (figure objects)\nmapping = Dict(\n\t\"A\" => A\n)\n\n# write all these figures into the inkscape svg\nplot_figures(inkscape, mapping)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"opening inkscape and going File > Revert, we will force reload inkscape  to any changes that have happened in the file. Now the file looks like this:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"(Image: )","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Lets apply the same process to id C:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"x = range(0, 2pi, 100)\nA = my_plot(x, sin.(x), inkscape, \"A\")\n# new figure!\nC = my_plot(x, sin.(x), inkscape, \"B\")\n\n# mapping of inkscape ids to figure objects\nmapping = Dict(\n\t\"A\" => A,\n\t\"C\" => C,\n)\n\n# write all these figures into the inkscape svg\nplot_figures(inkscape, mapping)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"(Image: )","category":"page"},{"location":"example/#Sizing-plots-to-inkscape-layout","page":"Example","title":"Sizing plots to inkscape layout","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"it seems that figure_second is not respecting the aspect ratios of the inkscape objects which in turn causes the plots to fill the allocated space poorly. To fix this we can use the relative_dimensions function to calculate a figure resolution that respects the inkscape aspect ratio. Updating our my_plot  function:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"function my_plot(x, y, inkscape::Updater, inkscape_id::String)\n\t\n\t# every figure will have a height of 500, but the width will\n\t# change to respect the aspect ratio of the output\n\tdesired_height = 500.\n\tlocal res = relative_dimensions(inkscape, inkscape_id, desired_height)\n\n\tfig = Figure(resolution = res, dpi = 200)\n\n\tax = Axis(fig[1,1], title = inkscape_id)\n\t\n\tlines!(ax, x, y, linewidth=4)\n\n\treturn fig\nend","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"re-running the code and reloading the inkscape figure we have the following:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"(Image: )","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"then we can adjust our plotting commands for the other boxes:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"x = range(0, 2pi, 100)\nA = my_plot(x, sin.(x), inkscape, \"A\")\nC = my_plot(x, sin.(x), inkscape, \"C\")\nB = my_plot(x, tan.(x), inkscape, \"B\")\nD = my_plot(x, abs.(cos.(x)), inkscape, \"D\")\n\nmapping = Dict(\n\t\"A\"=> A,\n\t\"C\"=> C,\n\t\"B\"=> B,\n\t\"D\" => D\n)","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"(Image: )","category":"page"},{"location":"example/#The-beauty-of-figure_second","page":"Example","title":"The beauty of figure_second","text":"","category":"section"},{"location":"example/","page":"Example","title":"Example","text":"Lets say we want to change all the line plots to scatter plots, and make all background colors different:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"function my_plot(x, y, inkscape::Updater, inkscape_id::String)\n\t# manually set a resolution\n\tlocal res = (600, 400)\n\tdesired_height = 500.\n\tlocal res = relative_dimensions(inkscape, inkscape_id, desired_height)\n\t\n\tfig = Figure(resolution = res, dpi = 200)\n\n\t# now a black background\n\tax = Axis(fig[1,1], title = inkscape_id, backgroundcolor=:black)\n\t\n\t# now a scatter plot\n\tscatter!(ax, x, y, linewidth=4)\n\n\treturn fig\nend","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"our figure now looks like:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"(Image: )","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"Or, what if we moved all the rectangles in our figure:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"(Image: )","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"rerendering in julia:","category":"page"},{"location":"example/","page":"Example","title":"Example","text":"(Image: )","category":"page"}]
}
